class Solution {
    class Tuple{
        int[]arr;
        double dist;
        public Tuple(int[]arr,double dist){
            this.arr = arr;
            this.dist = dist;
        }
    }
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Tuple>pq = new PriorityQueue<>((a,b)-> Double.compare(b.dist, a.dist));
        for(int i = 0;i<points.length;i++){
            int x = points[i][0];
            int y = points[i][1];

            double dist = (double)Math.sqrt((x*x + y*y));
            pq.add(new Tuple(points[i],dist));
             if(pq.size()>k){
                pq.poll();
            }
        }

       int[][]ans = new int[k][2];
       int idx = 0;

        while(!pq.isEmpty() && idx<k){
            ans[idx] = pq.poll().arr;
            idx++; 
        }
       return ans;
    }
}
