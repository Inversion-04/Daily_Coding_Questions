class Solution {
    static int mod = 1000000007;

    public int helper(int cr, int cc, int m, int n, int[][] grid, int call, int[][][] dp) {

        if (cr < 0 || cc < 0) {
            return 0;
        }

        if (cr == 0 && cc == 0) {
            return 1;
        }

        if (dp[cr][cc][call] != -1) {
            return dp[cr][cc][call];
        }

        int left = 0;
        int top = 0;

        if (grid[cr][cc] == 1) {
            if (call == 0) {
                top += helper(cr - 1, cc, m, n, grid, 1, dp);
            } else {
                left += helper(cr, cc - 1, m, n, grid, 0, dp);
            }
        } else {

            left += helper(cr, cc - 1, m, n, grid, 0, dp);
            top += helper(cr - 1, cc, m, n, grid, 1, dp);

        }
        return dp[cr][cc][call] = ((top + left) % mod);
    }

    public int uniquePaths(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        int[][][] dp = new int[m][n][2];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return helper(m - 1, n - 1, m, n, grid, 0, dp);
    }
}
