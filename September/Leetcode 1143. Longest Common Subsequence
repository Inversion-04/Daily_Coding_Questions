class Solution {
   
    public int longestCommonSubsequence(String text1, String text2) {
        int[][]dp = new int[text1.length()+1][text2.length()+1];
         for(int j=0;j<text2.length()+1;j++){
            dp[0][j] = 0;
         }
          for(int j=0;j<text1.length()+1;j++){
            dp[j][0] = 0;
         }

         for(int i=1;i<=text1.length();i++){
            for(int j=1;j<=text2.length();j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
         }
        return dp[text1.length()][text2.length()];
//here we take n+1,m+1 because we have to deal with -1 index for that dp[i][j] //represent dp[i-1][j-1] therefore for dp[0][0] represent dp[-1][-1]
    }
}
