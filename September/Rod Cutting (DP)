Question : Given a rod of length n inches and an array price[], where price[i] denotes the value of a piece of length i. Your task is to determine 
the maximum value obtainable by cutting up the rod and selling the pieces.

Note: n = size of price, and price[] is 1-indexed array.

Example:

Input: price[] = [1, 5, 8, 9, 10, 17, 17, 20]
Output: 22
Explanation: The maximum obtainable value is 22 by cutting in two pieces of lengths 2 and 6, i.e., 5 + 17 = 22

*************************************************************** Memoization Approach **************************************************************************

class Solution {
    public static int helper(int idx,int[]price,int length,int[][]dp){
        if(length == 0){
            return 0;
        }
        if(idx == 0){
            return length*price[0];
        }
        if(dp[idx][length]!=-1){
            return dp[idx][length];
        }
        int notake = helper(idx-1,price,length,dp);
        int take = 0;
        if(length>=idx+1){
            take = price[idx] + helper(idx,price,length-(idx+1),dp);
        }
        return dp[idx][length] = Math.max(take,notake);
        
    }
    public int cutRod(int[] price) {
        int[][]dp = new int[price.length][price.length+1];
        for(int i=0;i<price.length;i++){
            Arrays.fill(dp[i],-1);
        }
        return helper(price.length-1,price,price.length,dp);
    }
}

*************************************************************** Tabulation Approach **************************************************************************

class Solution {
    public int cutRod(int[] price) {
        int n = price.length;
        int[][]dp = new int[n][n+1];
        
        for(int i=0;i<n+1;i++){
            dp[0][i] = price[0]*i;
        }
        
        for(int i=1;i<n;i++){
            for(int j=0;j<n+1;j++){
               int notake = dp[i-1][j];
               int take = 0;
               if(j>=i+1){
                   take = price[i] + dp[i][j-(i+1)];
               }
               dp[i][j] = Math.max(take,notake);
            }
        }
        return dp[n-1][n];
    }
}

Tabulation
